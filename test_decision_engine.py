#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
决策引擎测试脚本
测试各种市场场景下的决策逻辑
"""

import sys
import logging
from utils.decision_engine import DecisionEngine

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_scenario(name: str, features: list, news_data: list = None):
    """测试单个场景"""
    print("\n" + "="*70)
    print(f"🧪 测试场景: {name}")
    print("="*70)
    
    engine = DecisionEngine(account_balance=10000, risk_percent=0.015)
    result = engine.analyze(features, news_data)
    
    print(engine.format_decision_report(result))
    return result


def main():
    """运行所有测试场景"""
    
    print("🚀 开始测试决策引擎")
    print("="*70)
    
    # ==================== 场景1: 强烈看涨信号 ====================
    features_bullish = [
        12.0,   # [0] ETH Gas - 低
        6.0,    # [1] BTC Fee - 低
        1,      # [2] ETH适合
        1,      # [3] BTC适合
        50000,  # [4] 价格
        2.0,    # [5] 24h涨跌 +2% (温和上涨)
        1500000,# [6] 成交量
        0.018,  # [7] 波动率 1.8% (低)
        1,      # [8] 趋势 上涨
        50800,  # [9] 最高
        49200,  # [10] 最低
        49500,  # [11] 开盘
        0.68,   # [12] RSI
        0.40,   # [13] 新闻正面 40%
        0.08,   # [14] 新闻负面 8%
        18,     # [15] 新闻数量
        1,      # [16] 新闻看涨
        0.82,   # [17] 新闻置信度
        0.78,   # [18] 市场置信度
        60,     # [19] 恐惧贪婪指数 (温和乐观)
        1,      # [20] 市场看涨
        0.80,   # [21] AI置信度
        3,      # [22] AI看涨数
        0,      # [23] AI看跌数
        1.0,    # [24] AI一致性 100%
        1       # [25] AI共识 看涨
    ]
    
    result1 = test_scenario("强烈看涨信号 (理想买入)", features_bullish)
    
    # ==================== 场景2: 强烈看跌信号 ====================
    features_bearish = [
        15.0,   # [0] ETH Gas
        8.0,    # [1] BTC Fee
        1,      # [2] ETH适合
        1,      # [3] BTC适合
        50000,  # [4] 价格
        -2.2,   # [5] 24h涨跌 -2.2% (温和下跌)
        1200000,# [6] 成交量
        0.022,  # [7] 波动率 2.2%
        -1,     # [8] 趋势 下跌
        50500,  # [9] 最高
        48800,  # [10] 最低
        50300,  # [11] 开盘
        0.35,   # [12] RSI
        0.12,   # [13] 新闻正面 12%
        0.38,   # [14] 新闻负面 38%
        15,     # [15] 新闻数量
        -1,     # [16] 新闻看跌
        0.75,   # [17] 新闻置信度
        0.72,   # [18] 市场置信度
        35,     # [19] 恐惧贪婪指数 (恐惧)
        -1,     # [20] 市场看跌
        0.78,   # [21] AI置信度
        0,      # [22] AI看涨数
        3,      # [23] AI看跌数
        1.0,    # [24] AI一致性 100%
        -1      # [25] AI共识 看跌
    ]
    
    result2 = test_scenario("强烈看跌信号 (理想卖出)", features_bearish)
    
    # ==================== 场景3: 信号不明确 - HOLD ====================
    features_neutral = [
        20.0,   # [0] ETH Gas
        10.0,   # [1] BTC Fee
        1,      # [2] ETH适合
        1,      # [3] BTC适合
        50000,  # [4] 价格
        0.3,    # [5] 24h涨跌 +0.3% (几乎不变)
        1000000,# [6] 成交量
        0.025,  # [7] 波动率 2.5%
        0,      # [8] 趋势 平稳
        50200,  # [9] 最高
        49800,  # [10] 最低
        50000,  # [11] 开盘
        0.50,   # [12] RSI
        0.25,   # [13] 新闻正面 25%
        0.20,   # [14] 新闻负面 20%
        10,     # [15] 新闻数量
        0,      # [16] 新闻中性
        0.60,   # [17] 新闻置信度
        0.55,   # [18] 市场置信度
        50,     # [19] 恐惧贪婪指数 (中性)
        0,      # [20] 市场中性
        0.62,   # [21] AI置信度
        1,      # [22] AI看涨数
        1,      # [23] AI看跌数
        0.50,   # [24] AI一致性 50%
        0       # [25] AI共识 不明确
    ]
    
    result3 = test_scenario("信号不明确 (观望)", features_neutral)
    
    # ==================== 场景4: Gas费用过高 - HOLD ====================
    features_high_gas = [
        55.0,   # [0] ETH Gas - 非常高！
        25.0,   # [1] BTC Fee - 非常高！
        0,      # [2] ETH不适合
        0,      # [3] BTC不适合
        50000,  # [4] 价格
        2.5,    # [5] 24h涨跌
        1500000,# [6] 成交量
        0.018,  # [7] 波动率
        1,      # [8] 趋势 上涨
        50800,  # [9] 最高
        49200,  # [10] 最低
        49500,  # [11] 开盘
        0.68,   # [12] RSI
        0.40,   # [13] 新闻正面
        0.08,   # [14] 新闻负面
        18,     # [15] 新闻数量
        1,      # [16] 新闻看涨
        0.82,   # [17] 新闻置信度
        0.78,   # [18] 市场置信度
        60,     # [19] 恐惧贪婪
        1,      # [20] 市场看涨
        0.80,   # [21] AI置信度
        3,      # [22] AI看涨数
        0,      # [23] AI看跌数
        1.0,    # [24] AI一致性
        1       # [25] AI共识 看涨
    ]
    
    result4 = test_scenario("Gas费用过高 (安全检查失败)", features_high_gas)
    
    # ==================== 场景5: 波动率过高 - HOLD ====================
    features_high_volatility = [
        12.0,   # [0] ETH Gas - 正常
        6.0,    # [1] BTC Fee - 正常
        1,      # [2] ETH适合
        1,      # [3] BTC适合
        50000,  # [4] 价格
        5.5,    # [5] 24h涨跌 +5.5% (波动大)
        2000000,# [6] 成交量
        0.055,  # [7] 波动率 5.5% (过高！)
        1,      # [8] 趋势 上涨
        52500,  # [9] 最高
        48000,  # [10] 最低
        49000,  # [11] 开盘
        0.75,   # [12] RSI
        0.40,   # [13] 新闻正面
        0.08,   # [14] 新闻负面
        18,     # [15] 新闻数量
        1,      # [16] 新闻看涨
        0.82,   # [17] 新闻置信度
        0.78,   # [18] 市场置信度
        60,     # [19] 恐惧贪婪
        1,      # [20] 市场看涨
        0.80,   # [21] AI置信度
        3,      # [22] AI看涨数
        0,      # [23] AI看跌数
        1.0,    # [24] AI一致性
        1       # [25] AI共识 看涨
    ]
    
    result5 = test_scenario("波动率过高 (安全检查失败)", features_high_volatility)
    
    # ==================== 场景6: 市场极端贪婪 - HOLD ====================
    features_extreme_greed = [
        12.0,   # [0] ETH Gas
        6.0,    # [1] BTC Fee
        1,      # [2] ETH适合
        1,      # [3] BTC适合
        50000,  # [4] 价格
        3.0,    # [5] 24h涨跌
        1500000,# [6] 成交量
        0.018,  # [7] 波动率
        1,      # [8] 趋势 上涨
        50800,  # [9] 最高
        49200,  # [10] 最低
        49500,  # [11] 开盘
        0.68,   # [12] RSI
        0.40,   # [13] 新闻正面
        0.08,   # [14] 新闻负面
        18,     # [15] 新闻数量
        1,      # [16] 新闻看涨
        0.82,   # [17] 新闻置信度
        0.78,   # [18] 市场置信度
        85,     # [19] 恐惧贪婪 (极端贪婪！)
        1,      # [20] 市场看涨
        0.80,   # [21] AI置信度
        3,      # [22] AI看涨数
        0,      # [23] AI看跌数
        1.0,    # [24] AI一致性
        1       # [25] AI共识 看涨
    ]
    
    result6 = test_scenario("市场极端贪婪 (安全检查失败)", features_extreme_greed)
    
    # ==================== 场景7: 数据不足 - HOLD ====================
    features_insufficient_data = [
        12.0,   # [0] ETH Gas
        6.0,    # [1] BTC Fee
        1,      # [2] ETH适合
        1,      # [3] BTC适合
        50000,  # [4] 价格
        2.0,    # [5] 24h涨跌
        1500000,# [6] 成交量
        0.018,  # [7] 波动率
        1,      # [8] 趋势 上涨
        50800,  # [9] 最高
        49200,  # [10] 最低
        49500,  # [11] 开盘
        0.68,   # [12] RSI
        0.40,   # [13] 新闻正面
        0.08,   # [14] 新闻负面
        3,      # [15] 新闻数量 (只有3条，不足！)
        1,      # [16] 新闻看涨
        0.82,   # [17] 新闻置信度
        0.78,   # [18] 市场置信度
        60,     # [19] 恐惧贪婪
        1,      # [20] 市场看涨
        0.80,   # [21] AI置信度
        0,      # [22] AI看涨数 (没有AI预测！)
        0,      # [23] AI看跌数
        0.0,    # [24] AI一致性
        0       # [25] AI共识 不明确
    ]
    
    result7 = test_scenario("数据不足 (安全检查失败)", features_insufficient_data)
    
    # ==================== 场景8: 一致性不足 - HOLD ====================
    features_low_consistency = [
        12.0,   # [0] ETH Gas
        6.0,    # [1] BTC Fee
        1,      # [2] ETH适合
        1,      # [3] BTC适合
        50000,  # [4] 价格
        1.5,    # [5] 24h涨跌
        1500000,# [6] 成交量
        0.018,  # [7] 波动率
        1,      # [8] 趋势 上涨 ✓
        50800,  # [9] 最高
        49200,  # [10] 最低
        49500,  # [11] 开盘
        0.68,   # [12] RSI
        0.30,   # [13] 新闻正面
        0.15,   # [14] 新闻负面
        12,     # [15] 新闻数量
        -1,     # [16] 新闻看跌 ✗ (矛盾！)
        0.70,   # [17] 新闻置信度
        0.65,   # [18] 市场置信度
        58,     # [19] 恐惧贪婪
        1,      # [20] 市场看涨 ✓
        0.65,   # [21] AI置信度
        1,      # [22] AI看涨数
        1,      # [23] AI看跌数 (矛盾！)
        0.50,   # [24] AI一致性 50%
        0       # [25] AI共识 不明确
    ]
    
    result8 = test_scenario("一致性不足 (信号矛盾)", features_low_consistency)
    
    # ==================== 测试总结 ====================
    print("\n" + "="*70)
    print("📊 测试总结")
    print("="*70)
    
    scenarios = [
        ("场景1: 强烈看涨", result1),
        ("场景2: 强烈看跌", result2),
        ("场景3: 信号不明确", result3),
        ("场景4: Gas过高", result4),
        ("场景5: 波动率过高", result5),
        ("场景6: 市场极端贪婪", result6),
        ("场景7: 数据不足", result7),
        ("场景8: 一致性不足", result8),
    ]
    
    print("\n决策统计:")
    buy_count = sum(1 for _, r in scenarios if r['decision']['action'] == 'BUY')
    sell_count = sum(1 for _, r in scenarios if r['decision']['action'] == 'SELL')
    hold_count = sum(1 for _, r in scenarios if r['decision']['action'] == 'HOLD')
    
    print(f"  🟢 BUY:  {buy_count} 次")
    print(f"  🔴 SELL: {sell_count} 次")
    print(f"  ⚪ HOLD: {hold_count} 次")
    
    print("\n各场景结果:")
    for name, result in scenarios:
        action = result['decision']['action']
        confidence = result['decision']['confidence']
        emoji = "🟢" if action == "BUY" else ("🔴" if action == "SELL" else "⚪")
        print(f"  {emoji} {name}: {action} (置信度: {confidence:.0f}%)")
    
    print("\n" + "="*70)
    print("✅ 测试完成！决策引擎运行正常。")
    print("="*70)


if __name__ == "__main__":
    main()
